{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u8bbf\u95ee ScratchHW Wiki \u00b6 ScratchHW (Scratch Hardware) \u8d77\u6e90\u4e8eScratch3. \u662f\u4e00\u4e2a\u9002\u7528\u4e8e\u786c\u4ef6\u8bbe\u5907\u5b9a\u5236\u7684\u7248\u672c\uff0c\u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u4ee3\u7801\u751f\u6210\u3001\u7f16\u8bd1\u53ca\u4e0a\u4f20\u7684\u529f\u80fd\u3002\u540c\u65f6\u4e5f\u652f\u6301\u5b9e\u65f6\u6a21\u5f0f\uff0c\u5373\u539f\u7248Scratch3\u4e2dMicrobit\u4e0eEV3\u7684\u90a3\u79cd\u8fde\u63a5\u63a7\u5236\u65b9\u5f0f\u3002 \u5feb\u901f\u5f00\u59cb \u00b6 \u6211\u662f\u5f00\u53d1\u8005 \u6211\u662f\u666e\u901a\u7528\u6237","title":"\u4e3b\u9875"},{"location":"#scratchhw-wiki","text":"ScratchHW (Scratch Hardware) \u8d77\u6e90\u4e8eScratch3. \u662f\u4e00\u4e2a\u9002\u7528\u4e8e\u786c\u4ef6\u8bbe\u5907\u5b9a\u5236\u7684\u7248\u672c\uff0c\u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u4ee3\u7801\u751f\u6210\u3001\u7f16\u8bd1\u53ca\u4e0a\u4f20\u7684\u529f\u80fd\u3002\u540c\u65f6\u4e5f\u652f\u6301\u5b9e\u65f6\u6a21\u5f0f\uff0c\u5373\u539f\u7248Scratch3\u4e2dMicrobit\u4e0eEV3\u7684\u90a3\u79cd\u8fde\u63a5\u63a7\u5236\u65b9\u5f0f\u3002","title":"\u6b22\u8fce\u8bbf\u95ee ScratchHW Wiki"},{"location":"#_1","text":"\u6211\u662f\u5f00\u53d1\u8005 \u6211\u662f\u666e\u901a\u7528\u6237","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"changelog/","text":"","title":"\u53d1\u884c\u8bf4\u660e"},{"location":"install-software-developer/","text":"\u5f00\u59cb\u5f00\u53d1ScratchHW \u00b6 \u5f00\u53d1\u73af\u5883 \u00b6 \u786e\u4fdd\u4f60\u7684\u8ba1\u7b97\u673a\u4e2d\u5b89\u88c5\u6709\u4ee5\u4e0b\u5de5\u5177\u53ca\u8f6f\u4ef6\u3002 Node 8 python2.7 Git \u6ce8\u610f : \u5982\u679c\u4f60\u5728\u4e2d\u56fd\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u4ee3\u7406\u8f6f\u4ef6\u6765\u4e3anpm\u4e0b\u8f7d\u7684\u5185\u5bb9\u63d0\u4f9b\u52a0\u901f\uff0c\u5426\u5219\u6709\u5f88\u5927\u6982\u7387\u4f1a\u4e0b\u8f7d\u5931\u8d25\u3002 Clone & Install \u00b6 Clone \u6240\u6709\u5fc5\u987b\u7684\u4ed3\u5e93\u3002 (\u4f7f\u7528 --depth \u6307\u4ee4\u6765\u51cf\u5c0f\u4e0b\u8f7d\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u5426\u5219gui\u7684\u6587\u4ef6\u4f53\u79ef\u5c06\u9ad8\u8fbe1.18GB) mkdir ScratchHW cd ScratchHW git clone https://github.com/ScratchHW/saveSvgAsPng git clone --depth 3 https://github.com/ScratchHW/scratch-gui git clone --depth 3 https://github.com/ScratchHW/scratch-blocks git clone https://github.com/ScratchHW/scratch-l10n git clone --depth 3 https://github.com/ScratchHW/scratch-vm git clone https://github.com/ScratchHW/scratch-link git clone https://github.com/ScratchHW/scratch-extension-server Install \u548c link cd scratch-link npm install cd .. cd scratch-extension-server npm install cd .. cd saveSvgAsPng npm install npm link cd .. cd scratch-blocks npm install npm link cd .. cd scratch-l10n npm install npm build npm link cd .. cd scratch-vm npm install npm link cd .. cd scratch-gui npm install npm link save-svg-as-png scratch-blocks scratch-l10n scratch-vm scratch-audio scratch-render cd .. \u590d\u5236Arduino IDE\u5230 scratch-link\\tools\\Arduino\\* \uff0c\u5b8c\u6210\u540e\u6587\u4ef6\u7ed3\u6784\u5e94\u8be5\u5982\u4e0b\u9762\u6240\u793a\u3002 scratch-link\\tools\\ |- Arduino\\ |- drivers\\ |- examples\\ |- hardware\\ |- java\\ ... |- arduino.exe |- arduino_debug.exe \u8fd0\u884c \u00b6 \u542f\u52a8 scratch-link cd scratch-link npm start \u542f\u52a8 scratch-extension-server \u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\u3002 cd scratch-extension-server npm start \u542f\u52a8 scratch-gui \u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\u3002 cd scratch-gui npm run start-open \u5728 webpack \u6253\u5305\u5b8c\u6210\u540e\uff0c\u4f60\u4f1a\u5c31\u4f1a\u770b\u5230\u4e00\u4e2a\u6d4f\u89c8\u5668\u7a97\u53e3\u5f39\u51fa\u6765\u4e86\uff0c\u4f53\u9a8c\u4e00\u4e0b\u5427~\u3002","title":"\u5b89\u88c5(\u5f00\u53d1\u8005)"},{"location":"install-software-developer/#scratchhw","text":"","title":"\u5f00\u59cb\u5f00\u53d1ScratchHW"},{"location":"install-software-developer/#_1","text":"\u786e\u4fdd\u4f60\u7684\u8ba1\u7b97\u673a\u4e2d\u5b89\u88c5\u6709\u4ee5\u4e0b\u5de5\u5177\u53ca\u8f6f\u4ef6\u3002 Node 8 python2.7 Git \u6ce8\u610f : \u5982\u679c\u4f60\u5728\u4e2d\u56fd\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u4ee3\u7406\u8f6f\u4ef6\u6765\u4e3anpm\u4e0b\u8f7d\u7684\u5185\u5bb9\u63d0\u4f9b\u52a0\u901f\uff0c\u5426\u5219\u6709\u5f88\u5927\u6982\u7387\u4f1a\u4e0b\u8f7d\u5931\u8d25\u3002","title":"\u5f00\u53d1\u73af\u5883"},{"location":"install-software-developer/#clone-install","text":"Clone \u6240\u6709\u5fc5\u987b\u7684\u4ed3\u5e93\u3002 (\u4f7f\u7528 --depth \u6307\u4ee4\u6765\u51cf\u5c0f\u4e0b\u8f7d\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u5426\u5219gui\u7684\u6587\u4ef6\u4f53\u79ef\u5c06\u9ad8\u8fbe1.18GB) mkdir ScratchHW cd ScratchHW git clone https://github.com/ScratchHW/saveSvgAsPng git clone --depth 3 https://github.com/ScratchHW/scratch-gui git clone --depth 3 https://github.com/ScratchHW/scratch-blocks git clone https://github.com/ScratchHW/scratch-l10n git clone --depth 3 https://github.com/ScratchHW/scratch-vm git clone https://github.com/ScratchHW/scratch-link git clone https://github.com/ScratchHW/scratch-extension-server Install \u548c link cd scratch-link npm install cd .. cd scratch-extension-server npm install cd .. cd saveSvgAsPng npm install npm link cd .. cd scratch-blocks npm install npm link cd .. cd scratch-l10n npm install npm build npm link cd .. cd scratch-vm npm install npm link cd .. cd scratch-gui npm install npm link save-svg-as-png scratch-blocks scratch-l10n scratch-vm scratch-audio scratch-render cd .. \u590d\u5236Arduino IDE\u5230 scratch-link\\tools\\Arduino\\* \uff0c\u5b8c\u6210\u540e\u6587\u4ef6\u7ed3\u6784\u5e94\u8be5\u5982\u4e0b\u9762\u6240\u793a\u3002 scratch-link\\tools\\ |- Arduino\\ |- drivers\\ |- examples\\ |- hardware\\ |- java\\ ... |- arduino.exe |- arduino_debug.exe","title":"Clone &amp; Install"},{"location":"install-software-developer/#_2","text":"\u542f\u52a8 scratch-link cd scratch-link npm start \u542f\u52a8 scratch-extension-server \u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\u3002 cd scratch-extension-server npm start \u542f\u52a8 scratch-gui \u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\u3002 cd scratch-gui npm run start-open \u5728 webpack \u6253\u5305\u5b8c\u6210\u540e\uff0c\u4f60\u4f1a\u5c31\u4f1a\u770b\u5230\u4e00\u4e2a\u6d4f\u89c8\u5668\u7a97\u53e3\u5f39\u51fa\u6765\u4e86\uff0c\u4f53\u9a8c\u4e00\u4e0b\u5427~\u3002","title":"\u8fd0\u884c"},{"location":"install-software-user/","text":"\u5f00\u59cb\u4f7f\u7528ScratchHW \u00b6 \u5373\u5c06\u5230\u6765","title":"\u5b89\u88c5(\u666e\u901a\u7528\u6237)"},{"location":"install-software-user/#scratchhw","text":"\u5373\u5c06\u5230\u6765","title":"\u5f00\u59cb\u4f7f\u7528ScratchHW"},{"location":"license/","text":"MIT License Copyright \u00a9 2020 ArthurZheng Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"\u8bb8\u53ef\u8bc1"},{"location":"reference/framework-introduction/","text":"\u6784\u5efa\u4ecb\u7ecd \u00b6 GUI - React \u524d\u7aef\u4ea4\u4e92\u754c\u9762 VM - \u7ba1\u7406\u72b6\u6001\u548c\u903b\u8f91\u64cd\u4f5c\u5e76\u5c06\u5176\u53d1\u9001\u7ed9GUI. Scratch Blocks - \u7531 Blockly \u521b\u5efa\u5206\u652f. \u8fd9\u4e2a\u4ed3\u5e93\u5904\u7406Blocks\u7684UI\u548c\u903b\u8f91\u529f\u80fd\uff0c\u901a\u8fc7VM\u4e0eGUI\u901a\u8baf\uff0c\u5e76\u63d0\u4f9b\u4e86\u7531\u79ef\u6728\u751f\u6210\u4ee3\u7801\u7684\u529f\u80fd\u3002 Sratch Link - \u63d0\u4f9b\u672c\u5730\u786c\u4ef6\u8bbe\u5907\u8fde\u63a5\u53ca\u7f16\u8bd1\u4e0b\u8f7d\u529f\u80fd\u7684\u670d\u52a1\u5668\u3002 Sratch Extension Server - \u63d0\u4f9b\u672c\u5730\u6216\u8fdc\u7a0b\u6269\u5c55\u7684\u670d\u52a1\u5668\u3002","title":"\u6784\u67b6\u4ecb\u7ecd"},{"location":"reference/framework-introduction/#_1","text":"GUI - React \u524d\u7aef\u4ea4\u4e92\u754c\u9762 VM - \u7ba1\u7406\u72b6\u6001\u548c\u903b\u8f91\u64cd\u4f5c\u5e76\u5c06\u5176\u53d1\u9001\u7ed9GUI. Scratch Blocks - \u7531 Blockly \u521b\u5efa\u5206\u652f. \u8fd9\u4e2a\u4ed3\u5e93\u5904\u7406Blocks\u7684UI\u548c\u903b\u8f91\u529f\u80fd\uff0c\u901a\u8fc7VM\u4e0eGUI\u901a\u8baf\uff0c\u5e76\u63d0\u4f9b\u4e86\u7531\u79ef\u6728\u751f\u6210\u4ee3\u7801\u7684\u529f\u80fd\u3002 Sratch Link - \u63d0\u4f9b\u672c\u5730\u786c\u4ef6\u8bbe\u5907\u8fde\u63a5\u53ca\u7f16\u8bd1\u4e0b\u8f7d\u529f\u80fd\u7684\u670d\u52a1\u5668\u3002 Sratch Extension Server - \u63d0\u4f9b\u672c\u5730\u6216\u8fdc\u7a0b\u6269\u5c55\u7684\u670d\u52a1\u5668\u3002","title":"\u6784\u5efa\u4ecb\u7ecd"},{"location":"reference/how-to-add-a-new-device/","text":"\u5982\u4f55\u6dfb\u52a0\u65b0\u8bbe\u5907 \u00b6 \u4ecb\u7ecd \u00b6 \u5728scratch-HW\u4e2d\uff0c\u8bbe\u5907\u5404\u79cd\u5355\u7247\u673a, \u5982: arduino uno, arduino nano \u7b49\u3002 \u548c\u539fscratch\u7684\u6269\u5c55\u76f8\u6bd4, \u8bbe\u5907\u6240\u6307\u7684\u5355\u7247\u673a\u9700\u8981\u5728\u7528\u6237\u5728\u8bbe\u5907\u754c\u9762\u4e2d\u5355\u51fb\u540e\u624d\u4f1a\u88ab\u52a0\u8f7d\u3002 \u5728scratch-gui\u4e2d\u6dfb\u52a0\u8bbe\u5907\u7684\u56fe\u7247\u548c\u914d\u7f6e \u00b6 \u6839\u636e\u4e0b\u9762\u7684\u53c2\u6570\u62cd\u6444\u5355\u7247\u673a\u7167\u7247\u3002\u5e76\u4fdd\u7559\u5408\u9002\u7684\u767d\u8272\u8fb9\u7f18\u3002 Format png Resolution 600x372 Background Color white \u4f60\u53ef\u4ee5\u6839\u636e\u4e0b\u56fe\u8fdb\u884c\u5236\u4f5c\u3002\u6700\u540e\u4f7f\u7528\u5355\u7247\u673a\u7684\u540d\u79f0\u8fdb\u884c\u547d\u540d\u3002 \u8bf7\u9075\u5faa\u9a7c\u5cf0\u683c\u5f0f, \u5982 : arduinoLeonardo.png \u5c06pnd\u683c\u5f0f\u56fe\u7247\u540e\u8f6c\u6362\u4e3asvg\u56fe\u7247. Delte the background of the board picture. And crop image along the edge of board, aspect ratio is 108x87 , save it. Then crop image\u2018s aspect ratio to**1x1**, save it. Visit this website: aconvert.com . Upload the saved pictures, convert it to svg format separately. Remember to select the Resize image option as Change width and Height , set Image size 108x87 and 40x40 . Save the 108x87 piture with name -illustration.svg, eg : arduinoUno-illustration.svg Save the 40x40 piture with name -small.svg, eg : arduinoUno-small.svg Pull three pictures to a folder named with the board name. eg : arduinoUno , move this folder to path : scratch-gui\\src\\lib\\libraries\\devices\\ When you're done, the file structure will look like this : scratch-gui\\src\\lib\\libraries\\devices\\ |- arduinoLeonardo\\ |- arduinoMega2560\\ |- baseToolbox\\ |- ... |- <board name>\\ |- <board name>.png |- <board name>-illustration.svg |- <board name>-small.svg |- index.jsx Configuration in index.jsx . In file scratch-gui\\src\\lib\\libraries\\devices\\index.jsx \uff0cYou can see that there are already some configuration of devices there. Let's take arduino uno's parameters as an example. Fist, import the pictures. import arduinoUnoIconURL from './arduinoUno/arduinoUno.png' ; import arduinoUnoConnectionIconURLL from './arduinoUno/arduinoUno-illustration.svg' ; import arduinoUnoConnectionSmallIconURL from './arduinoUno/arduinoUno-small.svg' ; Then set the configuration. { name : 'Arduino Uno' , deviceId : 'arduinoUno' , collaborator : 'arduino' , type : 'arduino' , iconURL : arduinoUnoIconURL , description : ( < FormattedMessage defaultMessage = \"The best board to get started with electronics and coding.\" description = \"Description for the Arduino Uno device\" id = \"gui.device.arduinoUno.description\" /> ), featured : true , disabled : false , bluetoothRequired : false , serialportRequired : true , internetConnectionRequired : false , launchPeripheralConnectionFlow : true , useAutoScan : false , connectionIconURL : arduinoUnoConnectionIconURLL , connectionSmallIconURL : arduinoUnoConnectionSmallIconURL , connectingMessage : ( < FormattedMessage defaultMessage = \"Connecting\" description = \"Message to help people connect to their arduino.\" id = \"gui.device.arduino.connectingMessage\" /> ), baseToolBoxXml : arduinoBaseToolBox , programMode : [ 'realtime' , 'upload' ], programLanguage : [ 'block' , 'c' , 'cpp' ], helpLink : 'https://store.arduino.cc/usa/arduino-uno-rev3' }, ** indicates that this is required.The same below.* name The display name of this device. deviceId* The id witch used to load device in scratch-vm. collaborator This will be displayed in Collaborator bar of the device selection interface. type* It tells gui witch code generator should be use. iconURL* Will be displayed in device selection interface. description This will be displayed in bottom of iconURL of the device selection interface. For multi language we use FormattedMessage here, It will be send to the scratchHW project in translation website. If the translation is not available yet, the content in defaultMessage will be displayed. featured* This is a internal attribute. It should always set to true. disabled Set to true to disabled this device selection. bluetoothRequired/serialportRequired/internetConnectionRequired Set to true to display the connection icon in Requires bar of the device selection interface. These parameters are only used to control the display in the device selection interface, will not affect the actual connection function. launchPeripheralConnectionFlow* It tells gui open the connection interface after we select the device, recommended to set to true. useAutoScan This is used to search and connect device automaticly. connectionIconURL* Will be displayed in device connection coninterface. connectionSmallIconURL* Will be displayed in the top bar of device connection interface. connectingMessage* The message to be displayed in device connection interface while connecting. Suggested not to modify it. baseToolBoxXml* It provide the special toolbox to gui. Suggested not to modify it. programMode* If the porgram mode is not supported the mode switch will be locked after select the device. programLanguage* This will be displayed in Program Language bar of the device selection interface. helpLink This will be used in device connection coninterface. Click the help button in connection coninterface, it will open this link. After these job, you should see your new device display in the device selection interface. If you click it, nothing will be happen, we still need to add logic layer code in vm. Add the device code in scratch-vm \u00b6 NOTE: Since firmata has not been ported yet, the following content may be added and changed in the near future. NOTE: Since only the Arduino device system is currently completed, the following content is only adapted to Arduino devices. Other devices will be added in future Create a new folder in path scratch-vm\\src\\devices named by board name. eg : arduinoUno. And copy src\\devices\\example\\index.js to the new folder After this, the file structure will look like this : scratch-vm\\src\\devices\\ |- arduinoLeonardo\\ |- arduinoMega2560\\ |- ... |- <board name>\\ |- index.js Now let's modify the index.js. The comments in the example are already very detailed. Follow the instructions to modify the file to fit your device. You can also refer to src\\devices\\arduinoUno\\index.js . The following only introduces where you need to modify. PNPID_LIST This list will control scratch-link to filter the serial device. Prevent ordinary users from being confused by the messy computer's own serial port or other useless serial devices. /* A list of USB device filters. If include '*' means disable the filter */ const PNPID_LIST = [ //https://github.com/arduino/Arduino/blob/1.8.0/hardware/arduino/avr/boards.txt#L51-L58 'USB\\\\VID_2341&PID_0043' , 'USB\\\\VID_2341&PID_0001' , 'USB\\\\VID_2A03&PID_0043' , 'USB\\\\VID_2341&PID_0243' , // For chinese clones that use CH340 'USB\\\\VID_1A86&PID_7523' // Uncomment this to close filter // '*' ]; DIVECE_OPT type tells scratch-link witch program compiler and hardware flash should be used to handle the upload request. board is provided to arduino_debug.exe. Same as we selection the board type in arduinoIDE. Visit this link to learn more about this parameter meanings and options: Arduino manpage.adoc . partno tells the poart number of mcu number to avrdude. Visit this link to learn more about this parameter meanings and options: avrdude Option-Descriptions /** * Configuration of build and flash. Used by arduino_debug and avrdude. * @readonly */ const DIVECE_OPT = { type : 'arduino' , board : 'arduino:avr:uno' , partno : 'atmega328p' } Add catlore and block to your device. The difference with the original scratch3 extension is getInfo return a object array not a object. So it allow you to provide multi catlore for your device in gui toolbox. /** * @returns {Array.<object>} metadata for this extension and its blocks. */ getInfo () { return [ { //... }, { //... } ] } Add block2code generator function in scratch-blocks \u00b6","title":"\u5982\u4f55\u6dfb\u52a0\u65b0\u8bbe\u5907"},{"location":"reference/how-to-add-a-new-device/#_1","text":"","title":"\u5982\u4f55\u6dfb\u52a0\u65b0\u8bbe\u5907"},{"location":"reference/how-to-add-a-new-device/#_2","text":"\u5728scratch-HW\u4e2d\uff0c\u8bbe\u5907\u5404\u79cd\u5355\u7247\u673a, \u5982: arduino uno, arduino nano \u7b49\u3002 \u548c\u539fscratch\u7684\u6269\u5c55\u76f8\u6bd4, \u8bbe\u5907\u6240\u6307\u7684\u5355\u7247\u673a\u9700\u8981\u5728\u7528\u6237\u5728\u8bbe\u5907\u754c\u9762\u4e2d\u5355\u51fb\u540e\u624d\u4f1a\u88ab\u52a0\u8f7d\u3002","title":"\u4ecb\u7ecd"},{"location":"reference/how-to-add-a-new-device/#scratch-gui","text":"\u6839\u636e\u4e0b\u9762\u7684\u53c2\u6570\u62cd\u6444\u5355\u7247\u673a\u7167\u7247\u3002\u5e76\u4fdd\u7559\u5408\u9002\u7684\u767d\u8272\u8fb9\u7f18\u3002 Format png Resolution 600x372 Background Color white \u4f60\u53ef\u4ee5\u6839\u636e\u4e0b\u56fe\u8fdb\u884c\u5236\u4f5c\u3002\u6700\u540e\u4f7f\u7528\u5355\u7247\u673a\u7684\u540d\u79f0\u8fdb\u884c\u547d\u540d\u3002 \u8bf7\u9075\u5faa\u9a7c\u5cf0\u683c\u5f0f, \u5982 : arduinoLeonardo.png \u5c06pnd\u683c\u5f0f\u56fe\u7247\u540e\u8f6c\u6362\u4e3asvg\u56fe\u7247. Delte the background of the board picture. And crop image along the edge of board, aspect ratio is 108x87 , save it. Then crop image\u2018s aspect ratio to**1x1**, save it. Visit this website: aconvert.com . Upload the saved pictures, convert it to svg format separately. Remember to select the Resize image option as Change width and Height , set Image size 108x87 and 40x40 . Save the 108x87 piture with name -illustration.svg, eg : arduinoUno-illustration.svg Save the 40x40 piture with name -small.svg, eg : arduinoUno-small.svg Pull three pictures to a folder named with the board name. eg : arduinoUno , move this folder to path : scratch-gui\\src\\lib\\libraries\\devices\\ When you're done, the file structure will look like this : scratch-gui\\src\\lib\\libraries\\devices\\ |- arduinoLeonardo\\ |- arduinoMega2560\\ |- baseToolbox\\ |- ... |- <board name>\\ |- <board name>.png |- <board name>-illustration.svg |- <board name>-small.svg |- index.jsx Configuration in index.jsx . In file scratch-gui\\src\\lib\\libraries\\devices\\index.jsx \uff0cYou can see that there are already some configuration of devices there. Let's take arduino uno's parameters as an example. Fist, import the pictures. import arduinoUnoIconURL from './arduinoUno/arduinoUno.png' ; import arduinoUnoConnectionIconURLL from './arduinoUno/arduinoUno-illustration.svg' ; import arduinoUnoConnectionSmallIconURL from './arduinoUno/arduinoUno-small.svg' ; Then set the configuration. { name : 'Arduino Uno' , deviceId : 'arduinoUno' , collaborator : 'arduino' , type : 'arduino' , iconURL : arduinoUnoIconURL , description : ( < FormattedMessage defaultMessage = \"The best board to get started with electronics and coding.\" description = \"Description for the Arduino Uno device\" id = \"gui.device.arduinoUno.description\" /> ), featured : true , disabled : false , bluetoothRequired : false , serialportRequired : true , internetConnectionRequired : false , launchPeripheralConnectionFlow : true , useAutoScan : false , connectionIconURL : arduinoUnoConnectionIconURLL , connectionSmallIconURL : arduinoUnoConnectionSmallIconURL , connectingMessage : ( < FormattedMessage defaultMessage = \"Connecting\" description = \"Message to help people connect to their arduino.\" id = \"gui.device.arduino.connectingMessage\" /> ), baseToolBoxXml : arduinoBaseToolBox , programMode : [ 'realtime' , 'upload' ], programLanguage : [ 'block' , 'c' , 'cpp' ], helpLink : 'https://store.arduino.cc/usa/arduino-uno-rev3' }, ** indicates that this is required.The same below.* name The display name of this device. deviceId* The id witch used to load device in scratch-vm. collaborator This will be displayed in Collaborator bar of the device selection interface. type* It tells gui witch code generator should be use. iconURL* Will be displayed in device selection interface. description This will be displayed in bottom of iconURL of the device selection interface. For multi language we use FormattedMessage here, It will be send to the scratchHW project in translation website. If the translation is not available yet, the content in defaultMessage will be displayed. featured* This is a internal attribute. It should always set to true. disabled Set to true to disabled this device selection. bluetoothRequired/serialportRequired/internetConnectionRequired Set to true to display the connection icon in Requires bar of the device selection interface. These parameters are only used to control the display in the device selection interface, will not affect the actual connection function. launchPeripheralConnectionFlow* It tells gui open the connection interface after we select the device, recommended to set to true. useAutoScan This is used to search and connect device automaticly. connectionIconURL* Will be displayed in device connection coninterface. connectionSmallIconURL* Will be displayed in the top bar of device connection interface. connectingMessage* The message to be displayed in device connection interface while connecting. Suggested not to modify it. baseToolBoxXml* It provide the special toolbox to gui. Suggested not to modify it. programMode* If the porgram mode is not supported the mode switch will be locked after select the device. programLanguage* This will be displayed in Program Language bar of the device selection interface. helpLink This will be used in device connection coninterface. Click the help button in connection coninterface, it will open this link. After these job, you should see your new device display in the device selection interface. If you click it, nothing will be happen, we still need to add logic layer code in vm.","title":"\u5728scratch-gui\u4e2d\u6dfb\u52a0\u8bbe\u5907\u7684\u56fe\u7247\u548c\u914d\u7f6e"},{"location":"reference/how-to-add-a-new-device/#add-the-device-code-in-scratch-vm","text":"NOTE: Since firmata has not been ported yet, the following content may be added and changed in the near future. NOTE: Since only the Arduino device system is currently completed, the following content is only adapted to Arduino devices. Other devices will be added in future Create a new folder in path scratch-vm\\src\\devices named by board name. eg : arduinoUno. And copy src\\devices\\example\\index.js to the new folder After this, the file structure will look like this : scratch-vm\\src\\devices\\ |- arduinoLeonardo\\ |- arduinoMega2560\\ |- ... |- <board name>\\ |- index.js Now let's modify the index.js. The comments in the example are already very detailed. Follow the instructions to modify the file to fit your device. You can also refer to src\\devices\\arduinoUno\\index.js . The following only introduces where you need to modify. PNPID_LIST This list will control scratch-link to filter the serial device. Prevent ordinary users from being confused by the messy computer's own serial port or other useless serial devices. /* A list of USB device filters. If include '*' means disable the filter */ const PNPID_LIST = [ //https://github.com/arduino/Arduino/blob/1.8.0/hardware/arduino/avr/boards.txt#L51-L58 'USB\\\\VID_2341&PID_0043' , 'USB\\\\VID_2341&PID_0001' , 'USB\\\\VID_2A03&PID_0043' , 'USB\\\\VID_2341&PID_0243' , // For chinese clones that use CH340 'USB\\\\VID_1A86&PID_7523' // Uncomment this to close filter // '*' ]; DIVECE_OPT type tells scratch-link witch program compiler and hardware flash should be used to handle the upload request. board is provided to arduino_debug.exe. Same as we selection the board type in arduinoIDE. Visit this link to learn more about this parameter meanings and options: Arduino manpage.adoc . partno tells the poart number of mcu number to avrdude. Visit this link to learn more about this parameter meanings and options: avrdude Option-Descriptions /** * Configuration of build and flash. Used by arduino_debug and avrdude. * @readonly */ const DIVECE_OPT = { type : 'arduino' , board : 'arduino:avr:uno' , partno : 'atmega328p' } Add catlore and block to your device. The difference with the original scratch3 extension is getInfo return a object array not a object. So it allow you to provide multi catlore for your device in gui toolbox. /** * @returns {Array.<object>} metadata for this extension and its blocks. */ getInfo () { return [ { //... }, { //... } ] }","title":"Add the device code in scratch-vm"},{"location":"reference/how-to-add-a-new-device/#add-block2code-generator-function-in-scratch-blocks","text":"","title":"Add block2code generator function in scratch-blocks"}]}